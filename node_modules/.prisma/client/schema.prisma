generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  profile   Profile? @relation(fields: [profileId], references: [id], name: "UserProfile")
  profileId Int?     @unique

  sentMessages Message[] @relation("Sender")

  conversations UserConversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int     @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  user      User?   @relation(name: "UserProfile")
  userId    Int?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id          Int     @id @default(autoincrement())
  name        String?
  isGroupChat Boolean @default(false)

  messages Message[]

  participants UserConversation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastMessageId Int?     @unique
  lastMessage   Message? @relation("LastConversationMessage", fields: [lastMessageId], references: [id])

  @@index([lastMessageId])
}

model UserConversation {
  userId         Int
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  joinedAt   DateTime  @default(now())
  lastReadAt DateTime?

  @@id([userId, conversationId])
}

model Message {
  id       Int    @id @default(autoincrement())
  content  String
  sender   User   @relation("Sender", fields: [senderId], references: [id])
  senderId Int

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int

  createdAt DateTime @default(now())

  isLastMessageFor Conversation? @relation("LastConversationMessage")

  @@index([senderId])
  @@index([conversationId])
}
